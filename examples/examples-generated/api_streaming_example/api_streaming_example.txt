Starting CQL Compiler v1.0...
2025-03-17 05:47:15.477 UTC [INFO] [Thread:0x20607c840] Claude Query Language (CQL) Compiler v1.0
Parsing command line arguments...
Received argument: examples/api_streaming_example.llm
2025-03-17 05:47:15.477 UTC [INFO] [Thread:0x20607c840] Processing file: examples/api_streaming_example.llm
Processing file: examples/api_streaming_example.llm

Compiled Query
==============

Please include the following copyright header at the top of all generated files:
```
// MIT License
// Copyright (c) 2025 CQL Project Contributors
```

Please generate C++ code that:
implement a complete HTTP server with routing capabilities

Context:
- Modern C++20 implementation
- Cross-platform (Windows, Linux, macOS)

Architecture Requirements:
- Modular design with separation of concerns
- Event-driven architecture for request handling
- Thread pool for handling concurrent connections

Dependencies:
- Asynchronous I/O using std::async and futures
- Socket handling with platform-specific APIs

Performance Requirements:
- Handle at least 10,000 concurrent connections
- Response time under 10ms for static content

Security Requirements:
- Protection against common web vulnerabilities (XSS, CSRF, etc.)
- TLS/SSL support for HTTPS connections

Model Parameters:
- Output Format: multiple_files

Please include tests for the following cases:
- Test basic HTTP GET/POST/PUT/DELETE methods
- Test concurrent request handling
- Test request routing with path parameters
- Test HTTPS connections and certificate handling
- Test streaming responses for large files
- Test error handling for invalid requests

Quality Assurance Requirements:
- All code must be well-documented with comments
- Follow modern C++ best practices
- Ensure proper error handling
- Optimize for readability and maintainability

