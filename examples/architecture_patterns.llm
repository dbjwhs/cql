@copyright "MIT License" "2025 dbjwhs"
@language "C++"
@description "Implement a document processing system with proper architecture patterns"
@context "Modern C++20 implementation with type-erasure patterns"
@architecture foundation "microservices" "Components communicate via message queues"
@dependency "message queue library"
@architecture component "factory_method" "products: [\"PdfDocument\", \"WordDocument\", \"TextDocument\"]"
@architecture component "singleton" "name: \"DocumentManager\", thread_safe: true"
@architecture component "builder" "steps: [\"Header\", \"Content\", \"Footer\", \"Metadata\"]"
@architecture component "abstract_factory" "product_families: [\"Viewers\", \"Editors\", \"Converters\"]"
@architecture interaction "observer" "events: [\"documentChanged\", \"documentSaved\", \"documentLoaded\"]"
@architecture interaction "strategy" "strategies: [\"TextFormatting\", \"ImageRendering\", \"TableLayout\"]"
@test "Factory method creates correct document type based on file extension"
@test "Builder constructs documents in the correct order"
@test "Singleton ensures only one DocumentManager exists"
@test "Abstract factory creates compatible document tools"
@test "Observer pattern properly notifies all registered components on document changes"
@example "Document Processing" "auto document = DocumentFactory::createDocument(\"report.pdf\"); DocumentBuilder builder; builder.buildHeader(\"Quarterly Report\").buildContent(content_data).buildFooter(\"Confidential\").buildMetadata({\"author\": \"Jane Doe\", \"created\": \"2025-02-28\"}); auto doc = builder.getDocument(); DocumentManager::getInstance().registerDocument(doc); auto documentTools = ToolFactory::createToolsFor(doc->getType()); doc->applyFormatting(TextFormattingStrategy::create(\"corporate\")); doc->attachObserver(std::make_shared<AutoSaveObserver>()); doc->attachObserver(std::make_shared<ValidationObserver>()); doc->updateContent(new_content);"
@model "claude-3-opus"
@format "markdown"