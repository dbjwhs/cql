@copyright "MIT License" "2025 dbjwhs"
@language "C++"
@description "Implement a flexible UI component system with structural patterns"
@context "Modern C++20 implementation with component-based design"
@architecture foundation "layered" "Separate UI components from business logic and data sources"
@architecture component "adapter" "interface: \"DatabaseInterface\", adaptee: \"LegacyDatabase\""
@architecture component "bridge" "implementors: [\"WindowsRenderer\", \"MacOSRenderer\", \"LinuxRenderer\"]"
@architecture component "composite" "component_type: \"UIComponent\""
@architecture component "decorator" "decorations: [\"Border\", \"Shadow\", \"ScrollBar\"]"
@architecture component "facade" "subsystems: [\"Networking\", \"DataStorage\", \"Authentication\"]"
@architecture component "flyweight" "shared_state: [\"Theme\", \"FontFamily\"], unique_state: [\"Text\", \"Position\"]"
@architecture component "proxy" "proxy_type: \"LazyLoadingProxy\""
@architecture component "factory_method" "products: [\"Button\", \"TextField\", \"Panel\", \"Dialog\"]"
@architecture interaction "observer" "events: [\"click\", \"focus\", \"resize\", \"dataChange\"]"
@test "Adapter successfully connects legacy database to modern interface"
@test "Bridge separates component abstraction from platform-specific renderers"
@test "Composite allows building complex UI hierarchies"
@test "Decorator dynamically adds visual effects to components"
@test "Facade simplifies complex subsystem interactions"
@test "Flyweight reduces memory usage for repeated UI elements"
@test "Proxy provides lazy loading for expensive UI components"
@example "Composite UI Components" "auto panel = ComponentFactory::createComponent(\"Panel\"); panel->addChild(ComponentFactory::createComponent(\"Button\")); panel->addChild(ComponentFactory::createComponent(\"TextField\")); auto decoratedPanel = std::make_shared<BorderDecorator>(panel); decoratedPanel = std::make_shared<ShadowDecorator>(decoratedPanel); decoratedPanel->setRenderer(RendererFactory::createRenderer()); decoratedPanel->render(); ThemeManager::getInstance().applyTheme(decoratedPanel, \"DarkTheme\"); decoratedPanel->addObserver(std::make_shared<ComponentResizeObserver>());"
@model "claude-3-sonnet"
@format "markdown"
